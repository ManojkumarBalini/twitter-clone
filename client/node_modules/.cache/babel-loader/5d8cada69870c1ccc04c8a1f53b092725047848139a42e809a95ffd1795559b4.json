{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authService = {\n  setToken: token => {\n    if (token) {\n      localStorage.setItem('token', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      localStorage.removeItem('token');\n      delete api.defaults.headers.common['Authorization'];\n    }\n  },\n  login: (email, password) => {\n    return api.post('/auth/login', {\n      email,\n      password\n    }).then(response => response.data).catch(error => {\n      throw error.response.data;\n    });\n  },\n  register: userData => {\n    return api.post('/auth/register', userData).then(response => response.data).catch(error => {\n      throw error.response.data;\n    });\n  }\n};\n\n// Add these for future use\nexport const tweetService = {\n  getTweets: () => {\n    return api.get('/tweets').then(response => response.data);\n  },\n  createTweet: content => {\n    return api.post('/tweets', {\n      content\n    }).then(response => response.data);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authService","setToken","setItem","defaults","common","removeItem","login","email","password","post","then","response","data","catch","error","register","userData","tweetService","getTweets","get","createTweet","content"],"sources":["C:/Users/balne/Desktop/twitter-clone/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Add token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authService = {\r\n  setToken: (token) => {\r\n    if (token) {\r\n      localStorage.setItem('token', token);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n    }\r\n  },\r\n  \r\n  login: (email, password) => {\r\n    return api.post('/auth/login', { email, password })\r\n      .then(response => response.data)\r\n      .catch(error => {\r\n        throw error.response.data;\r\n      });\r\n  },\r\n  \r\n  register: (userData) => {\r\n    return api.post('/auth/register', userData)\r\n      .then(response => response.data)\r\n      .catch(error => {\r\n        throw error.response.data;\r\n      });\r\n  }\r\n};\r\n\r\n// Add these for future use\r\nexport const tweetService = {\r\n  getTweets: () => {\r\n    return api.get('/tweets')\r\n      .then(response => response.data);\r\n  },\r\n  \r\n  createTweet: (content) => {\r\n    return api.post('/tweets', { content })\r\n      .then(response => response.data);\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMM,WAAW,GAAG;EACzBC,QAAQ,EAAGN,KAAK,IAAK;IACnB,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;MACpCP,GAAG,CAACe,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUT,KAAK,EAAE;IAClE,CAAC,MAAM;MACLC,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChC,OAAOjB,GAAG,CAACe,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAC,eAAe,CAAC;IACrD;EACF,CAAC;EAEDE,KAAK,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAC1B,OAAOpB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAE;MAAEF,KAAK;MAAEC;IAAS,CAAC,CAAC,CAChDE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACd,MAAMA,KAAK,CAACH,QAAQ,CAACC,IAAI;IAC3B,CAAC,CAAC;EACN,CAAC;EAEDG,QAAQ,EAAGC,QAAQ,IAAK;IACtB,OAAO5B,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAEO,QAAQ,CAAC,CACxCN,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAI;MACd,MAAMA,KAAK,CAACH,QAAQ,CAACC,IAAI;IAC3B,CAAC,CAAC;EACN;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG;EAC1BC,SAAS,EAAEA,CAAA,KAAM;IACf,OAAO9B,GAAG,CAAC+B,GAAG,CAAC,SAAS,CAAC,CACtBT,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EACpC,CAAC;EAEDQ,WAAW,EAAGC,OAAO,IAAK;IACxB,OAAOjC,GAAG,CAACqB,IAAI,CAAC,SAAS,EAAE;MAAEY;IAAQ,CAAC,CAAC,CACpCX,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;EACpC;AACF,CAAC;AAED,eAAexB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}